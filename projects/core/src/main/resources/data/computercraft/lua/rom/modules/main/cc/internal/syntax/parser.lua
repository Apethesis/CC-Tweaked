--[[- A parser for Lua programs and expressions.

:::warning
This is an internal module and SHOULD NOT be used in your own code. It may
be removed or changed at any time.
:::

Most of the code in this module is automatically generated from the Lua grammar,
hence being mostly unreadable!

@local
]]

-- Lazily load our map of errors
local errors = setmetatable({}, {
    __index = function(self, key)
        setmetatable(self, nil)
        for k, v in pairs(require "cc.internal.syntax.errors") do self[k] = v end

        return self[key]
    end,
})

-- Everything below this line is auto-generated. DO NOT EDIT.

--- A lookup table of valid Lua tokens
local tokens = (function() return {} end)() -- Make tokens opaque to illuaminate. Nasty!
for i, token in ipairs({
    "WHILE", "UNTIL", "TRUE", "THEN", "SUB", "STRING", "SEMICOLON", "RETURN",
    "REPEAT", "POW", "OSQUARE", "OR", "OPAREN", "OBRACE", "NUMBER", "NOT",
    "NIL", "NE", "MUL", "MOD", "LT", "LOCAL", "LEN", "LE", "IN", "IF",
    "IDENT", "GT", "GE", "FUNCTION", "FOR", "FALSE", "EQUALS", "EQ", "EOF",
    "END", "ELSEIF", "ELSE", "DOTS", "DOT", "DO", "DIV", "CSQUARE", "CPAREN",
    "CONCAT", "COMMA", "COLON", "CBRACE", "BREAK", "AND", "ADD", "COMMENT",
    "ERROR",
}) do tokens[token] = i end
setmetatable(tokens, { __index = function(_, name) error("No such token " .. tostring(name), 2) end })

--- Read a integer with a given size from a string.
local function get_int(str, offset, size)
    if size == 1 then
        return str:byte(offset + 1)
    elseif size == 2 then
        local hi, lo = str:byte(offset + 1, offset + 2)
        return hi * 256 + lo
    elseif size == 3 then
        local b1, b2, b3 = str:byte(offset + 1, offset + 3)
        return b1 * 256 + b2 + b3 * 65536 -- Don't ask.
    else
        error("Unsupported size", 2)
    end
end

--[[ Error handling:

Errors are extracted from the current parse state in a two-stage process:
 - Run a DFA over the current state of the LR1 stack. For each accepting state,
   register a parse error.
 - Once all possible errors are found, pick the best of these and report it to
   the user.

This process is performed by a tiny register-based virtual machine. The bytecode
for this machine is stored in `error_program`, and the accompanying transition
table in `error_tbl`.

It would be more efficient to use tables here (`string.byte` is 2-3x slower than
a table lookup) or even define the DFA as a Lua program, however this approach
is much more space efficient - shaving off several kilobytes.

See https://github.com/let-def/lrgrep/ (namely ./support/lrgrep_runtime.ml) for
more information.
]]

local function is_same_line(context, previous, token)
    local prev_line = context.get_pos(previous)
    local tok_line = context.get_pos(token.s)
    return prev_line == tok_line and token.v ~= tokens.EOF
end

local function line_end_position(context, previous, token)
    if is_same_line(context, previous, token) then
        return token.s
    else
        return previous + 1
    end
end

local error_messages = {
    function(context, stack, stack_n, regs, token)
        -- parse_errors.mlyl, line 21
        if token.v == tokens.EQUALS then
        return errors.table_key_equals(token.s, token.e)
    end
    end,
    function(context, stack, stack_n, regs, token)
        -- parse_errors.mlyl, line 29
        if token.v == tokens.EQUALS then
        return errors.use_double_equals(token.s, token.e)
    end
    end,
    function(context, stack, stack_n, regs, token)
        local lp = { s = stack[regs[2] + 1], e = stack[regs[2] + 2] }
        -- parse_errors.mlyl, line 37
        return errors.unclosed_brackets(lp.s, lp.e, token.v, token.s, token.e)
    end,
    function(context, stack, stack_n, regs, token)
        local lp = { s = stack[regs[2] + 1], e = stack[regs[2] + 2] }
        -- parse_errors.mlyl, line 39
        return errors.unclosed_brackets(lp.s, lp.e, token.v, token.s, token.e)
    end,
    function(context, stack, stack_n, regs, token)
        local lp = { s = stack[regs[2] + 1], e = stack[regs[2] + 2] }
        -- parse_errors.mlyl, line 41
        return errors.unclosed_brackets(lp.s, lp.e, token.v, token.s, token.e)
    end,
    function(context, stack, stack_n, regs, token)
        local loc = { s = stack[regs[2] + 1], e = stack[regs[2] + 2] }
        -- parse_errors.mlyl, line 46
        if token.v == tokens.DOT then
        return errors.local_function_dot(loc.s, loc.e, token.s, token.e)
    end
    end,
    function(context, stack, stack_n, regs, token)
        -- parse_errors.mlyl, line 54
        local end_pos = stack[stack_n + 2] -- Hack to get the last position
    if is_same_line(context, end_pos, token) then
        return errors.standalone_name(token.s)
    else
        return errors.standalone_name_call(end_pos)
    end
    end,
    function(context, stack, stack_n, regs, token)
        local start = { s = stack[regs[2] + 1], e = stack[regs[2] + 2] }
        -- parse_errors.mlyl, line 65
        return errors.expected_then(start.s, start.e, line_end_position(context, stack[stack_n + 2], token))
    end,
    function(context, stack, stack_n, regs, token)
        local start = { s = stack[regs[2] + 1], e = stack[regs[2] + 2] }
        -- parse_errors.mlyl, line 93
        return errors.expected_end(start.s, start.e, token.v, token.s, token.e)
    end,
    function(context, stack, stack_n, regs, token)
        local func = { s = stack[regs[2] + 1], e = stack[regs[2] + 2] }
        local loc = { s = stack[regs[3] + 1], e = stack[regs[3] + 2] }
        -- parse_errors.mlyl, line 97
        return errors.expected_end(loc.s, func.e, token.v, token.s, token.e)
    end,
    function(context, stack, stack_n, regs, token)
        -- parse_errors.mlyl, line 101
        if token.v == tokens.END then
      return errors.unexpected_end(token.s, token.e)
    elseif token ~= tokens.EOF then
        return errors.expected_statement(token.v, token.s, token.e)
    end
    end,
    function(context, stack, stack_n, regs, token)
        -- parse_errors.mlyl, line 111
        return errors.expected_function_args(token.v, token.s, token.e)
    end,
    function(context, stack, stack_n, regs, token)
        -- parse_errors.mlyl, line 115
        return errors.expected_expression(token.v, token.s, token.e)
    end,
    function(context, stack, stack_n, regs, token)
        -- parse_errors.mlyl, line 119
        return errors.expected_var(token.v, token.s, token.e)
    end,
}
local error_program_start, error_program = 465, "\6\1\0\3\5\176\0\3\0060\0\3\6\30\0\3\6\22\0\3\6\14\0\3\6\3\0\3\5\245\0\3\5\235\0\3\5\218\0\3\5\205\0\3\5\185\0\1\0\3\5\176\0\3\5\168\0\3\5\160\0\3\5\160\0\3\5\160\0\3\5\160\0\3\5\160\0\3\5\136\0\3\5\136\0\3\5\160\0\3\5\152\0\3\5\144\0\3\5\144\0\3\5\144\0\3\5\136\0\3\5\128\0\3\5f\0\3\5^\0\3\5V\0\3\5N\0\3\5F\0\3\4\148\0\3\5<\0\3\0058\0\3\5-\0\3\4\161\0\3\4\157\0\3\4\149\0\3\1\220\0\3\4\148\0\3\4\142\0\3\4\136\0\3\4\131\0\3\4y\0\3\4q\0\3\4f\0\3\4E\0\3\4@\0\1\0\3\4;\0\1\0\3\0046\0\3\4/\0\3\3\146\0\3\3\138\0\3\3\134\0\3\3~\0\3\3n\0\3\3\130\0\3\3~\0\3\3~\0\3\3z\0\3\3v\0\3\2\240\0\3\3r\0\3\2\225\0\3\2\225\0\3\3n\0\3\3g\0\3\2\225\0\3\2\240\0\3\2\225\0\3\2\225\0\3\2\225\0\3\2\225\0\3\2\232\0\3\2\225\0\3\2\225\0\3\2\225\0\3\2\225\0\3\2X\0\3\2P\0\3\2D\0\3\2L\0\3\2H\0\3\2 \0\3\2\28\0\3\2D\0\3\2@\0\3\2<\0\3\0028\0\3\2\24\0\3\0024\0\3\2(\0\3\0020\0\3\2,\0\3\2(\0\3\2$\0\3\2 \0\3\2\28\0\3\2\24\0\3\2\20\0\3\2\16\0\3\2\12\0\3\2\8\0\3\2\8\0\3\2\4\0\3\2\0\0\3\1\252\0\3\1\252\0\3\1\243\0\3\1\229\0\3\1\235\0\3\1\229\0\3\1\220\0\5\0\0\3\4~\0\3\6;\0\5\0\14\1\0\3\0046\0\1\0\3\0046\0\3\6;\0\3\2\0\0\5\0\17\1\0\3\4;\0\3\1\243\0\3\1\243\0\3\2\0\0\3\6?\0\3\6C\0\3\4@\0\3\6G\0\3\0020\0\3\4f\0\3\2\28\0\3\2 \0\3\2\24\0\3\2P\0\3\2D\0\3\2@\0\3\0024\0\3\6K\0\3\2(\0\3\2,\0\3\6o\0\3\2H\0\3\6o\0\3\2\28\0\5\0\15\1\0\3\0046\0\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\6\203\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\171\0\3\6\171\0\3\6\195\0\3\6\187\0\3\6\179\0\3\6\179\0\3\6\179\0\3\6\171\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\3\2\225\0\3\2\225\0\3\2\225\0\3\3~\0\5\0\192\3\6v\0\3\3n\0\3\7\7\0\5\0\8\3\7\143\0\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\6\203\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\171\0\3\6\171\0\3\6\195\0\3\6\187\0\3\6\179\0\3\6\179\0\3\6\179\0\3\6\171\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\5\1\5\3\6v\0\3\3~\0\3\7\150\0\3\7\7\0\3\7\143\0\3\2\225\0\3\7\154\0\3\3\138\0\3\7\158\0\3\6\211\0\5\0\31\1\0\3\6\250\0\3\7\172\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\4@\0\1\0\3\0046\0\3\6\203\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\171\0\3\6\171\0\3\6\195\0\3\6\187\0\3\6\179\0\3\6\179\0\3\6\179\0\3\6\171\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\3\2\225\0\3\2\225\0\3\2\225\0\3\3~\0\3\7\162\0\3\2P\0\3\6C\0\3\6;\0\5\1h\3\6v\0\4\2\0\1\6\4\3\0\1\6\4\6\0\0\6\4\n\0\0\6\1\0\3\7\180\0\3\7\204\0\3\7\200\0\3\7\196\0\3\7\189\0\1\0\3\7\180\0\4\n\0\0\5\1\23\3\7\218\0\4\n\0\0\3\7\253\0\4\11\0\0\6\4\12\0\0\6\4\r\0\0\6\1\0\3\0046\0\1\0\3\4;\0\6\3\7\172\0\3\2P\0\5\0\18\6\3\7\162\0\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\4@\0\3\6\203\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\171\0\3\6\171\0\3\6\195\0\3\6\187\0\3\6\179\0\3\6\179\0\3\6\179\0\3\6\171\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\3\2\225\0\3\2\225\0\3\2\225\0\3\3~\0\3\6C\0\5\1\235\3\6v\0\3\7\196\0\5\0\30\6\3\7\200\0\1\0\3\8\4\0\4\1\0\0\5\0D\6\4\1\0\0\3\8\t\0\4\1\0\0\3\2\0\0\4\1\0\0\3\2D\0\4\1\0\0\3\8\r\0\1\0\3\0046\0\3\2,\0\3\2D\0\3\2\28\0\4\1\0\0\5\0\138\6\4\1\0\0\3\8\17\0\4\1\0\0\3\8\21\0\4\1\0\0\3\8\25\0\4\1\0\0\3\8\29\0\4\1\0\0\3\8!\0\4\n\0\0\4\8\0\1\6\4\11\0\0\3\8%\0\3\7\218\0\3\7\204\0\3\7\189\0\5\1\21\1\0\3\7\180\0\3\2\0\0\4\1\0\0\4\0\0\0\5\0008\1\0\3\4;\0\4\1\0\0\1\0\3\0046\0\4\1\0\0\1\0\3\8+\0\3\7\204\0\4\n\0\0\5\0\12\3\0080\0\4\n\0\0\3\7\204\0\4\n\0\0\3\0086\0\4\n\0\0\1\0\3\7\180\0\3\7\204\0\3\8<\0\4\n\0\0\5\0\161\3\8@\0\3\1\229\0\3\8D\0\3\2\16\0\3\8R\0\3\0028\0\1\0\3\5\176\0\3\6\30\0\3\6\22\0\3\6\14\0\3\6\3\0\1\0\3\5\176\0\3\4E\0\5\1L\3\0060\0\4\1\0\0\6\4\1\0\0\3\2\4\0\4\1\0\0\3\1\243\0\4\1\0\0\3\4f\0\4\1\0\0\3\2,\0\4\1\0\0\3\2P\0\4\1\0\0\3\8k\0\4\1\0\0\3\8\203\0\4\1\0\0\3\t6\0\4\1\0\0\3\tu\0\4\1\0\0\3\t\188\0\4\1\0\0\3\t\255\0\4\1\0\0\4\0\0\0\3\1\243\0\4\2\0\1\4\1\0\0\6\4\4\0\1\4\1\0\0\6\4\7\0\1\4\1\0\0\6\4\3\0\1\4\1\0\0\4\0\0\0\6\3\3z\0\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\6\203\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\171\0\3\6\171\0\3\6\195\0\3\6\187\0\3\6\179\0\3\6\179\0\3\6\179\0\3\6\171\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\3\2\225\0\3\2\225\0\3\2\225\0\3\3~\0\3\6o\0\5\2N\3\6v\0\3\2\240\0\3\n\142\0\3\5-\0\3\4\157\0\1\0\3\n\149\0\4\11\0\0\5\0@\6\4\8\0\1\6\3\7\204\0\5\0004\3\0080\0\3\7\204\0\3\0086\0\1\0\3\7\180\0\3\7\204\0\3\8<\0\5\0\187\3\8@\0\1\0\3\7\180\0\3\7\204\0\3\7\200\0\3\7\196\0\3\7\189\0\1\0\3\7\180\0\5\1\216\3\7\218\0\4\7\0\1\6\3\2\4\0\3\8k\0\3\8\203\0\3\t6\0\3\tu\0\3\t\188\0\3\t\255\0\1\0\3\n\149\0\4\4\0\1\6\1\0\3\n\154\0\1\0\3\n\163\0\3\n\171\0\3\n\175\0\3\4y\0\1\0\3\5\176\0\3\n\179\0\5\0\192\3\6\30\0\1\0\3\0046\0\3\2,\0\3\2D\0\3\2\28\0\5\0\164\6\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\6\203\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\171\0\3\6\195\0\3\6\187\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\5\2\145\3\6v\0\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\6\203\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\171\0\3\6\171\0\3\6\195\0\3\6\187\0\3\6\171\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\5\2\214\3\6v\0\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\5\2\221\3\6v\0\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\6\203\0\3\6\187\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\5\3\"\3\6v\0\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\6\187\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\5\3\25\3\6v\0\1\0\3\6\250\0\1\0\3\6\241\0\1\0\3\6\232\0\1\0\3\6\223\0\3\6\211\0\3\6\203\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\195\0\3\6\171\0\3\6\171\0\3\6\195\0\3\6\187\0\3\6\179\0\3\6\179\0\3\6\179\0\3\6\171\0\3\6\163\0\3\6\155\0\3\6\147\0\3\6\147\0\3\6\139\0\3\6\131\0\3\6{\0\3\2\225\0\3\2\225\0\3\2\225\0\3\7\143\0\3\7\7\0\3\3~\0\5\3\165\3\6v\0\4\5\0\1\6\2\1\0\1\0\3\n\189\0\4\8\0\1\3\4\148\0\3\7\204\0\3\n\198\0\4\n\0\0\1\0\3\n\154\0\4\t\1\2\6\3\n\205\0\5\0w\3\n\209\0\3\7\204\0\3\n\213\0\3\n\205\0"
local error_tbl_ks, error_tbl_vs, error_tbl = 1, 2, "\0\0\193\1\0\141\2\0\0\3\0\189\0\0\0\5\1A\0\0\0\7\1=\0\0\0\t\0\201\0\0\0\11\0019\0\0\0\r\0015\0\0\0\15\0\213\16\0\181\17\0\207\18\1\205\19\0\161\20\1\201\21\0\0\22\1\197\23\0\173\24\1\153\25\1\193\26\0\11\27\0'\28\0011\29\1-\30\1)\31\0\145 \1%!\1!\"\1\29\21\1\216$\1\25%\1\21\0\0\0'\1\17(\1\r)\1\t*\0\27\0\0\0,\0i\0\0\0.\0e\0\0\0000\0a\0\0\0002\0]\0\0\0004\0Y\0\0\0006\0U\0\0\0008\0Q\0\0\0:\0M\0\0\0<\0I\0\0\0>\0E\0\0\0@\0A\0\0\0B\0=\0\0\0D\0009\0\0\0F\0005G\0\225H\0\207I\1E\0\0\0K\0qL\0\173M\1\5N\0mO\0\0P\0\221Q\0\0R\0\0S\1\1T\0\253U\0\249V\0\245W\0\241X\0\27Y\0\0R\2\236[\0}\\\0\217\0\0\0^\0y_\1\189`\1\185a\1\181b\1\177c\1\173d\0#e\0\169f\0\237g\0\31h\0\233i\0\229j\0\129k\0\7l\0'm\1\149n\1\145o\1\141p\1\137q\0\193r\0\141b\1\239t\0uu\0\0v\0\177w\0+x\0\23y\0'z\1\133{\0\153|\1\129n\2T~\1}\127\0\177\128\0\149b\3\142\130\0\129\131\0\19\132\0\141\133\0\133\134\1yu\4\153\136\0\129\137\0\15\138\0\137\139\0/\140\0'\141\1u\142\0\177\143\0\157\144\0\181\145\0\0\146\1\169\147\0\0\148\1\165\149\0\23\150\0'\151\1q\152\0\177\153\0\165b\5\214\155\0\129\144\5\255\157\0\129\158\0\7\159\0'\160\1m\131\0054\162\0\129\163\0\7\164\0'\165\1i\166\0\0\137\0054\168\0\0\169\0\7\170\0'\171\1e\172\0\1\173\0'\174\1a\175\1]\176\1Y\177\1U\178\1Q\179\0\0\180\0\197u\7\166\182\1M\183\0\177\184\1\161\185\1\157\186\0\185\187\1I\188\0\0\189\0\193\190\0\141\191\0\0\192\0\0\193\0\0\194\0\0\3\0\0\144\7\185\129\5@\6\2\209\0\0\0\8\2s\t\2a\n\2m\135\5@\12\2\213\0\0\0\14\2\217\0\0\0\16\8HZ\n\194H\5n\0\0\0]\n\194" .. ("\0"):rep(42) .. "#\2m\0\0\0\0\0\0&\2\221\0\0\0\0\0\0\0\0\0I\6,+\2\177H\8Y-\2\173\0\0\0/\2\169\0\0\0001\2\165\0\0\0003\2\161}\n\1945\2\157\0\0\0007\2\153n\5|9\2\149\0\0\0;\2\145\0\0\0=\2\141\0\0\0?\2\137\0\0\0A\2\133\0\0\0C\2\129I\7\214E\2}\0\0\0}\5xH\2s\0\0\0J\2\181j\6(\0\0\0\8\3\t\t\2\247\n\3\3\0\0\0\154\n\194n\8g" .. ("\0"):rep(21) .. "Z\2\205\0\0\0\0\0\0]\2\201\0\0\0~\6,\0\0\0}\8cb\2y\0\0\0\0\0\0j\7\210\0\0\0\0\0\0#\3\3\0\0\0\0\0\0\0\0\0\181\n\194\0\0\0n\2\197\26\5\197+\3G\26\4P-\3Cs\2\193/\3?\0\0\0001\3;w\8N3\0037~\7\2145\0033\0\0\0007\3/}\2\1899\3+\181\5t;\3'\129\2g=\3#\0\0\0?\3\31\0\0\0A\3\27\135\2gC\3\23\168\6,E\3\19\0\0\0\0\6kH\3\t\0\0\0J\3K" .. ("\0"):rep(21) .. "\182\6,\0\0\0\181\8_" .. ("\0"):rep(15) .. "Z\3c\0\0\0\192\6,]\3_\168\7\214\0\0\0\0\0\0\26\6Ub\3\15\0\0\0\0\0\0\0\0\0\3\3\177\0\0\0\0\0\0\6\4\15\0\0\0\8\3\171\182\7\214\n\3\165n\3[\12\4\19\181\2\185\14\4\23\183\0\0s\3W\17\3\181\0\0\0\192\7\214\0\0\0\21\4+\0\0\0\0\0\0k\5\193\0\0\0}\3S\0\0\0\0\0\0\0\0\0\129\2\253\0\0\0q\0\0\0\0\0\0\0\0#\3\165\135\2\253x\5\201&\4\27x\4\\\0\0\0\0\0\0\0\0\0+\3\239\0\0\0-\3\235\0\0\0/\3\231\0\0\0001\3\227\131\4X3\3\223\0\0\0005\3\219\0\0\0007\3\215\137\4T9\3\211\139\4`;\3\207\0\0\0=\3\203\0\0\0?\3\199\0\0\0A\3\195\149\5\201C\3\191\149\4\\E\3\187\0\0\0\0\0\0H\3\171\0\0\0J\3\243\158\5\193\0\0\0\0\0\0\0\0\0\0\0\0\163\5\193\0\0\0\181\3O\0\0\0\0\0\0q\6k\169\5\193\0\0\0\0\0\0\0\0\0Z\4\11\172\4Jx\6a]\4\7" .. ("\0"):rep(27) .. "\131\6]\0\0\0\0\0\0\0\0\0\0\0\0\189\0\0\137\6Yn\4\3\139\6e\0\0\0\0\0\0\0\0\0s\3\255\0\0\0u\4#v\3\155\0\0\0\0\0\0\149\6a\0\0\0\0\0\0\0\0\0}\3\251\0\0\0\127\4\31\0\0\0\129\3\159\0\0\0\0\0\0\0\0\0\0\0\0\3\4\193\135\3\159\0\0\0\6\5\25\26\7\231\8\4\183\t\4\165\n\4\177\142\3\155\12\5\29\172\6O\14\5!" .. ("\0"):rep(18) .. "\152" .. ("\0"):rep(26) .. "\189\6k\0\0\0\0\0\0\0\0\0\0\0\0#\4\177\0\0\0\0\0\0&\5%\0\0\0\0\0\0\0\0\0\0\0\0+\4\249\0\0\0-\4\245\0\0\0/\4\241\0\0\0001\4\237\181\3\2473\4\233\183\4'5\4\229\0\0\0007\4\225\0\0\0009\4\221\0\0\0;\4\217\0\0\0=\4\213\0\0\0?\4\209\0\0\0A\4\205\0\0\0C\4\201\0\0\0E\4\197\0\0\0\0\0\0H\4\183\0\0\0J\4\253" .. ("\0"):rep(45) .. "Z\5\21\0\0\0\0\0\0]\5\17q\0\0\0\0\0\0\0\0\0\0\0b\4\189\0\0\0\0\0\0x\7\243\3\7\139\0\0\0\0\0\0\6\7{\0\0\0\8\7\29\t\7\11\n\7\23n\5\r\12\7\127\131\7\239\14\7\131\0\0\0s\5\t\0\0\0\0\0\0\137\7\235\0\0\0\139\7\247\0\0\0\0\0\0\0\0\0\0\0\0}\5\5\0\0\0\0\0\0\0\0\0\129\4\171\149\7\243\0\0\0\0\0\0\0\0\0#\7\23\135\4\171\0\0\0&\7\135\0\0\0\0\0\0\0\0\0\0\0\0+\7[\0\0\0-\7W\0\0\0/\7S\0\0\0001\7O\0\0\0003\7K\0\0\0005\7G\172\7\2257\7C\0\0\0009\7?\0\0\0;\7;\0\0\0=\0077\0\0\0?\0073\0\0\0A\7/\0\0\0C\7+\0\0\0E\7'\0\0\0\189\0\0H\7\29\0\0\0J\7_\8\8\129\t\8o\n\8{\0\0\0\0\0\0\0\0\0\0\0\0\181\5\1\0\0\0\183\5)" .. ("\0"):rep(15) .. "Z\7w\0\0\0\0\0\0]\7s\0\0\0\0\0\0\0\0\0\0\0\0b\7#\0\0\0\0\0\0\0\0\0#\8{" .. ("\0"):rep(21) .. "n\7o\0\0\0\0\0\0\0\0\0\0\0\0s\7k\0\0\0\0\0\0003\8\171\0\0\0005\8\167\0\0\0007\8\163\0\0\0\0\0\0}\7g;\8\159\0\0\0=\8\155\129\7\17?\8\151\0\0\0A\8\147\0\0\0C\8\143\135\7\17E\8\139\0\0\0\0\0\0H\8\129\0\0\0J\8\175\0\0\0\0\0\0\8\8\228\t\8\210\n\8\222\0\0\0\0\0\0\0\0\0\0\0\0\8\tO\t\t=\n\tI\0\0\0\0\0\0\0\0\0Z\8\199\0\0\0\0\0\0]\8\195\0\0\0\0\0\0\0\0\0\0\0\0b\8\135" .. ("\0"):rep(15) .. "#\8\222" .. ("\0"):rep(15) .. "n\8\191#\tI+\t\22\0\0\0\181\7cs\8\187\183\0\0\0\0\0\0\0\0\0\0\0003\t\18\0\0\0005\t\14\0\0\0007\t\n}\8\1839\t\6\0\0\0;\t\2\129\8u=\8\254\0\0\0?\8\250\0\0\0A\8\246\135\8uC\8\242\0\0\0E\8\238\0\0\0\0\0\0H\8\228\0\0\0J\t\26\8\t\213\t\t\195\n\t\207\0\0\0H\tO\0\0\0J\tY\0\0\0\0\0\0\8\t\142\t\t|\n\t\136\0\0\0\0\0\0\0\0\0Z\t2\0\0\0\0\0\0]\t.\0\0\0\0\0\0\0\0\0Z\tqb\8\234\0\0\0]\tm\0\0\0#\t\207\0\0\0\0\0\0b\tU\0\0\0\0\0\0\0\0\0\0\0\0n\t*#\t\136\181\8\179\0\0\0\0\0\0s\t&\0\0\0n\ti3\t\223\0\0\0\0\0\0\0\0\0s\te\0\0\0\0\0\0}\t\"\0\0\0003\t\156\0\0\0\129\8\216\0\0\0\0\0\0}\ta\0\0\0\0\0\0\135\8\216\129\tC\0\0\0\0\0\0H\t\213\0\0\0J\t\227\135\tC\0\0\0\0\0\0E\t\152\0\0\0\0\0\0H\t\142\0\0\0J\t\160" .. ("\0"):rep(18) .. "Z\t\251\0\0\0\0\0\0]\t\247\0\0\0\0\0\0\0\0\0\0\0\0b\t\219Z\t\184\0\0\0\0\0\0]\t\180\0\0\0\0\0\0\0\0\0\0\0\0b\t\148\0\0\0\0\0\0n\t\243\0\0\0\0\0\0\0\0\0\181\t\30s\t\239\0\0\0\0\0\0\0\0\0n\t\176\0\0\0\181\t]\0\0\0\0\0\0s\t\172}\t\235\0\0\0\0\0\0\0\0\0\129\t\201\0\0\0\0\0\0\0\0\0\0\0\0}\t\168\135\t\201\0\0\0\0\0\0\129\t\130" .. ("\0"):rep(15) .. "\135\t\130\0\0\0\6\nv\0\0\0\8\n\24\t\n\6\n\n\18\0\0\0\12\nz\0\0\0\14\n~" .. ("\0"):rep(54) .. "!\n\130\0\0\0#\n\18\0\0\0\0\0\0&\n\138\0\0\0\0\0\0\181\t\231\0\0\0+\nV\0\0\0-\nR\0\0\0/\nN\0\0\0001\nJ\181\t\1643\nF\0\0\0005\nB\0\0\0007\n>\0\0\0009\n:\0\0\0;\n6\0\0\0=\n2\0\0\0?\n.\0\0\0A\n*\0\0\0C\n&\0\0\0E\n\"\0\0\0\0\0\0H\n\24\0\0\0J\nZ" .. ("\0"):rep(21) .. "R\n\134" .. ("\0"):rep(21) .. "Z\nr\0\0\0\0\0\0]\nn\0\0\0\0\0\0\0\0\0\0\0\0b\n\30" .. ("\0"):rep(33) .. "n\nj\0\0\0\0\0\0\0\0\0\0\0\0s\nf" .. ("\0"):rep(27) .. "}\nb\0\0\0\0\0\0\0\0\0\129\n\12" .. ("\0"):rep(15) .. "\135\n\12" .. ("\0"):rep(129) .. "\179\n\130\0\0\0\181\n^"

local function handle_error(context, stack, stack_n, token, token_start, token_end)
    -- Run our error handling virtual machine.
    local pc, top, registers, messages = error_program_start, stack_n, {}, {}
    while true do
        local instruction = error_program:byte(pc + 1)
        if instruction == 1 then -- Store
            registers[error_program:byte(pc + 2) + 1] = top
            pc = pc + 2
        elseif instruction == 2 then -- Move
            registers[error_program:byte(pc + 2) + 1] = registers[error_program:byte(pc + 3) + 1]
            pc = pc + 3
        elseif instruction == 3 then -- Pop one item from the stack and jump
            if top > 1 then top = top - 3 end
            pc = get_int(error_program, pc + 1, 3)
        elseif instruction == 4 then -- Accept
            local clause, _, count = error_program:byte(pc + 2, pc + 4)
            local accept = { clause + 1 }
            for i = 1, count do accept[i + 1] = registers[count - i + 1] end
            messages[#messages + 1] = accept

            pc = pc + 4
        elseif instruction == 5 then -- Match
            local hi, lo = error_program:byte(pc + 2, pc + 3)
            local lr1 = stack[top] - 1

            local offset = (hi * 256 + lo + lr1) * (error_tbl_ks + error_tbl_vs)
            if offset + error_tbl_ks + error_tbl_vs <= #error_tbl and
                get_int(error_tbl, offset, error_tbl_ks) == lr1 then
                pc = get_int(error_tbl, offset + error_tbl_ks, error_tbl_vs)
            else
                pc = pc + 3
            end
        elseif instruction == 6 then -- Halt
            break
        else
            error("Illegal instruction while handling errors " .. tostring(instruction))
        end
    end

    -- Sort the list to ensure earlier patterns are used first.
    table.sort(messages, function(a, b) return a[1] < b[1] end)

    -- Then loop until we find an error message which actually works!
    local t = { v = token, s = token_start, e = token_end }
    for i = 1, #messages do
        local action = messages[i]
        local message = error_messages[action[1]](context, stack, stack_n, action, t)
        if message then
            context.report(message)
            return false
        end
    end

    context.report(errors.unexpected_token(token, token_start, token_end))
    return false
end

--- The list of productions in our grammar. Each is a tuple of `terminal * production size`.
local productions = {
    { 53, 1 }, { 52, 1 }, { 81, 1 }, { 81, 1 }, { 80, 3 }, { 79, 1 },
    { 79, 1 }, { 79, 1 }, { 79, 1 }, { 79, 1 }, { 79, 1 }, { 79, 1 },
    { 79, 1 }, { 79, 4 }, { 78, 2 }, { 78, 4 }, { 77, 3 }, { 77, 1 },
    { 77, 1 }, { 76, 1 }, { 76, 3 }, { 76, 3 }, { 76, 3 }, { 76, 3 },
    { 76, 3 }, { 76, 3 }, { 76, 3 }, { 76, 3 }, { 76, 3 }, { 76, 3 },
    { 76, 3 }, { 76, 3 }, { 76, 3 }, { 76, 3 }, { 75, 1 }, { 75, 3 },
    { 75, 2 }, { 75, 2 }, { 75, 2 }, { 74, 1 }, { 74, 3 }, { 74, 3 },
    { 73, 0 }, { 73, 2 }, { 73, 3 }, { 73, 1 }, { 73, 2 }, { 72, 1 },
    { 72, 3 }, { 72, 4 }, { 71, 2 }, { 70, 2 }, { 70, 2 }, { 69, 0 },
    { 69, 2 }, { 69, 3 }, { 68, 0 }, { 68, 5 }, { 67, 0 }, { 67, 1 },
    { 66, 0 }, { 66, 1 }, { 65, 1 }, { 65, 3 }, { 64, 1 }, { 64, 3 },
    { 63, 1 }, { 63, 3 }, { 62, 1 }, { 62, 3 }, { 61, 1 }, { 61, 3 },
    { 61, 1 }, { 60, 3 }, { 60, 3 }, { 60, 5 }, { 60, 4 }, { 60, 6 },
    { 60, 8 }, { 60, 9 }, { 60, 11 }, { 60, 7 }, { 60, 2 }, { 60, 4 },
    { 60, 6 }, { 60, 5 }, { 60, 1 }, { 59, 2 }, { 58, 3 }, { 57, 0 },
    { 57, 1 }, { 57, 3 }, { 56, 1 }, { 56, 3 }, { 56, 5 }, { 55, 1 },
    { 55, 1 }, { 54, 1 },
}

local f = false

--[[- The state machine used for our grammar.

Most LR(1) parsers will encode the transition table in a compact binary format,
optimised for space and fast lookups. However, without access to built-in
bitwise operations, this is harder to justify in Lua. Instead, the transition
table is a 2D lookup table of `action = transitions[state][value]`, where
`action` can be one of the following:

 - `action = false`: This transition is undefined, and thus a parse error. We
   use this (rather than nil) to ensure our tables are dense, and thus stored as
   arrays rather than maps.

 - `action > 0`: Shift this terminal or non-terminal onto the stack, then
   transition to `state = action`.

 - `action < 0`: Apply production `productions[-action]`. This production is a
   tuple composed of the next state and the number of values to pop from the
   stack.
]]
local transitions = {
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 2, f, f, f, f, f, f, f, f, f, 4, f, 189 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 3 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -51 },
    { 5, -43, f, f, f, f, f, 111, 114, f, f, f, 9, f, f, f, f, f, f, f, f, 118, f, f, f, 130, 16, f, f, 143, 153, f, f, f, -43, -43, -43, -43, f, f, 173, f, f, f, f, f, f, f, 176, f, f, f, f, 32, f, f, f, f, f, 178, 180, f, 181, f, f, f, f, f, f, f, f, 186, 187, f, f, f, f, 188 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 107, f, 41, 42 },
    { -9, -9, f, -9, -9, f, -9, -9, -9, -9, f, -9, -9, f, f, f, f, -9, -9, -9, -9, -9, f, -9, f, -9, -9, -9, -9, -9, -9, f, f, -9, -9, -9, -9, -9, f, f, -9, -9, -9, -9, -9, -9, f, -9, -9, -9, -9 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 106, f, f, 41, 42 },
    { -13, -13, f, -13, -13, f, -13, -13, -13, -13, f, -13, -13, f, f, f, f, -13, -13, -13, -13, -13, f, -13, f, -13, -13, -13, -13, -13, -13, f, f, -13, -13, -13, -13, -13, f, f, -13, -13, -13, -13, -13, -13, f, -13, -13, -13, -13 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 104, f, 41, 42 },
    { f, f, 6, f, 7, 8, f, f, f, f, 11, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 93, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, -90, f, f, f, f, f, 32, f, 96, 102, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 101, f, 41, 42 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 89, f, 41, 42 },
    { -12, -12, f, -12, -12, f, -12, -12, -12, -12, f, -12, -12, f, f, f, f, -12, -12, -12, -12, -12, f, -12, f, -12, -12, -12, -12, -12, -12, f, f, -12, -12, -12, -12, -12, f, f, -12, -12, -12, -12, -12, -12, f, -12, -12, -12, -12 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 88, f, f, 41, 42 },
    { -8, -8, f, -8, -8, f, -8, -8, -8, -8, f, -8, -8, f, f, f, f, -8, -8, -8, -8, -8, f, -8, f, -8, -8, -8, -8, -8, -8, f, f, -8, -8, -8, -8, -8, f, f, -8, -8, -8, -8, -8, -8, f, -8, -8, -8, -8 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 87, f, f, 41, 42 },
    { -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98 },
    { f, f, f, f, f, f, f, f, f, f, f, f, 18, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 27 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 16, f, f, f, f, f, f, f, f, f, f, f, 19, f, f, f, f, -59, f, f, f, f, f, f, f, f, f, 20, f, f, f, f, f, f, f, f, f, f, 21, f, 24, f, f, f, f, f, f, f, f, f, f, f, f, f, 26 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -4, f, -4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -3, f, -3 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -60, f, 22 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 16, f, f, f, f, f, f, f, f, f, f, f, 19, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 20, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 23 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -64, f, -64 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 25 },
    { -5, f, f, f, f, f, f, -5, -5, f, f, f, -5, f, f, f, f, f, f, f, f, -5, f, f, f, -5, -5, f, f, -5, -5, f, f, f, f, -5, f, f, f, f, -5, f, f, f, f, f, f, f, -5 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -63, f, -63 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 28, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 29 },
    { -14, -14, f, -14, -14, f, -14, -14, -14, -14, f, -14, -14, f, f, f, f, -14, -14, -14, -14, -14, f, -14, f, -14, -14, -14, -14, -14, -14, f, f, -14, -14, -14, -14, -14, f, f, -14, -14, -14, -14, -14, -14, f, -14, -14, -14, -14 },
    { -10, -10, f, -10, -10, f, -10, -10, -10, -10, f, -10, -10, f, f, f, f, -10, -10, -10, -10, -10, f, -10, f, -10, -10, -10, -10, -10, -10, f, f, -10, -10, -10, -10, -10, f, f, -10, -10, -10, -10, -10, -10, f, -10, -10, -10, -10 },
    { -11, -11, f, -11, -11, f, -11, -11, -11, -11, f, -11, -11, f, f, f, f, -11, -11, -11, -11, -11, f, -11, f, -11, -11, -11, -11, -11, -11, f, f, -11, -11, -11, -11, -11, f, f, -11, -11, -11, -11, -11, -11, f, -11, -11, -11, -11 },
    { -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48 },
    { -7, -7, f, -7, -7, f, -7, -7, -7, -7, f, -7, -7, f, f, f, f, -7, -7, -7, -7, -7, f, -7, f, -7, -7, -7, -7, -7, -7, f, f, -7, -7, -7, -7, -7, f, f, -7, -7, -7, -7, -7, -7, f, -7, -7, -7, -7 },
    { -6, -6, f, -6, -6, 35, -6, -6, -6, -6, 36, -6, 73, 10, f, f, f, -6, -6, -6, -6, -6, f, -6, f, -6, -6, -6, -6, -6, -6, f, f, -6, -6, -6, -6, -6, f, 80, -6, -6, -6, -6, -6, -6, 82, -6, -6, -6, -6, f, f, f, f, f, f, 84, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 86 },
    { -18, -18, f, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, f, f, f, -18, -18, -18, -18, -18, f, -18, f, -18, -18, -18, -18, -18, -18, f, f, -18, -18, -18, -18, -18, f, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 43, f, 41, 42 },
    { -71, -71, f, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, f, f, f, -71, -71, -71, -71, -71, f, -71, f, -71, -71, -71, -71, -71, -71, f, f, -71, -71, -71, -71, -71, f, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71 },
    { -20, -20, f, -20, -20, f, -20, -20, -20, 39, f, -20, -20, f, f, f, f, -20, -20, -20, -20, -20, f, -20, f, -20, -20, -20, -20, -20, -20, f, f, -20, -20, -20, -20, -20, f, f, -20, -20, -20, -20, -20, -20, f, -20, -20, -20, -20 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 40, f, f, 41, 42 },
    { -36, -36, -36, -36, -36, -36, -36, -36, -36, 39, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36 },
    { -73, -73, f, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, f, f, f, -73, -73, -73, -73, -73, f, -73, f, -73, -73, -73, -73, -73, -73, f, f, -73, -73, -73, -73, -73, f, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73 },
    { -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35 },
    { f, f, f, f, 44, f, f, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, f, 50, 72, f, 56, f, f, f, f, 70, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 45, f, 41, 42 },
    { -24, -24, f, -24, -24, f, -24, -24, -24, f, f, -24, -24, f, f, f, f, -24, 46, 48, -24, -24, f, -24, f, -24, -24, -24, -24, -24, -24, f, f, -24, -24, -24, -24, -24, f, f, -24, 50, -24, -24, -24, -24, f, -24, -24, -24, -24 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 47, f, 41, 42 },
    { -25, -25, f, -25, -25, f, -25, -25, -25, f, f, -25, -25, f, f, f, f, -25, -25, -25, -25, -25, f, -25, f, -25, -25, -25, -25, -25, -25, f, f, -25, -25, -25, -25, -25, f, f, -25, -25, -25, -25, -25, -25, f, -25, -25, -25, -25 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 49, f, 41, 42 },
    { -27, -27, f, -27, -27, f, -27, -27, -27, f, f, -27, -27, f, f, f, f, -27, -27, -27, -27, -27, f, -27, f, -27, -27, -27, -27, -27, -27, f, f, -27, -27, -27, -27, -27, f, f, -27, -27, -27, -27, -27, -27, f, -27, -27, -27, -27 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 51, f, 41, 42 },
    { -26, -26, f, -26, -26, f, -26, -26, -26, f, f, -26, -26, f, f, f, f, -26, -26, -26, -26, -26, f, -26, f, -26, -26, -26, -26, -26, -26, f, f, -26, -26, -26, -26, -26, f, f, -26, -26, -26, -26, -26, -26, f, -26, -26, -26, -26 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 53, f, 41, 42 },
    { -22, -22, f, -22, 44, f, -22, -22, -22, f, f, -22, -22, f, f, f, f, 54, 46, 48, 60, -22, f, 62, f, -22, -22, 64, 66, -22, -22, f, f, 68, -22, -22, -22, -22, f, f, -22, 50, -22, -22, 56, -22, f, -22, -22, 70, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 55, f, 41, 42 },
    { -30, -30, f, -30, 44, f, -30, -30, -30, f, f, -30, -30, f, f, f, f, -30, 46, 48, -30, -30, f, -30, f, -30, -30, -30, -30, -30, -30, f, f, -30, -30, -30, -30, -30, f, f, -30, 50, -30, -30, 56, -30, f, -30, -30, -30, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 57, f, 41, 42 },
    { -28, -28, f, -28, 44, f, -28, -28, -28, f, f, -28, -28, f, f, f, f, -28, 46, 48, -28, -28, f, -28, f, -28, -28, -28, -28, -28, -28, f, f, -28, -28, -28, -28, -28, f, f, -28, 50, -28, -28, 56, -28, f, -28, -28, -28, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 59, f, 41, 42 },
    { -23, -23, f, -23, -23, f, -23, -23, -23, f, f, -23, -23, f, f, f, f, -23, 46, 48, -23, -23, f, -23, f, -23, -23, -23, -23, -23, -23, f, f, -23, -23, -23, -23, -23, f, f, -23, 50, -23, -23, -23, -23, f, -23, -23, -23, -23 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 61, f, 41, 42 },
    { -31, -31, f, -31, 44, f, -31, -31, -31, f, f, -31, -31, f, f, f, f, -31, 46, 48, -31, -31, f, -31, f, -31, -31, -31, -31, -31, -31, f, f, -31, -31, -31, -31, -31, f, f, -31, 50, -31, -31, 56, -31, f, -31, -31, -31, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 63, f, 41, 42 },
    { -32, -32, f, -32, 44, f, -32, -32, -32, f, f, -32, -32, f, f, f, f, -32, 46, 48, -32, -32, f, -32, f, -32, -32, -32, -32, -32, -32, f, f, -32, -32, -32, -32, -32, f, f, -32, 50, -32, -32, 56, -32, f, -32, -32, -32, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 65, f, 41, 42 },
    { -33, -33, f, -33, 44, f, -33, -33, -33, f, f, -33, -33, f, f, f, f, -33, 46, 48, -33, -33, f, -33, f, -33, -33, -33, -33, -33, -33, f, f, -33, -33, -33, -33, -33, f, f, -33, 50, -33, -33, 56, -33, f, -33, -33, -33, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 67, f, 41, 42 },
    { -34, -34, f, -34, 44, f, -34, -34, -34, f, f, -34, -34, f, f, f, f, -34, 46, 48, -34, -34, f, -34, f, -34, -34, -34, -34, -34, -34, f, f, -34, -34, -34, -34, -34, f, f, -34, 50, -34, -34, 56, -34, f, -34, -34, -34, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 69, f, 41, 42 },
    { -29, -29, f, -29, 44, f, -29, -29, -29, f, f, -29, -29, f, f, f, f, -29, 46, 48, -29, -29, f, -29, f, -29, -29, -29, -29, -29, -29, f, f, -29, -29, -29, -29, -29, f, f, -29, 50, -29, -29, 56, -29, f, -29, -29, -29, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 71, f, 41, 42 },
    { -21, -21, f, -21, 44, f, -21, -21, -21, f, f, -21, -21, f, f, f, f, 54, 46, 48, 60, -21, f, 62, f, -21, -21, 64, 66, -21, -21, f, f, 68, -21, -21, -21, -21, f, f, -21, 50, -21, -21, 56, -21, f, -21, -21, -21, 58 },
    { -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, -61, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, 74, f, 77, f, f, f, f, f, 37, f, f, 38, 79, f, 41, 42 },
    { f, -62, f, f, f, f, -62, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -62, -62, -62, -62, f, f, f, f, f, -62, f, 75 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 76, f, 41, 42 },
    { -66, -66, f, f, 44, f, -66, -66, -66, f, f, 52, -66, f, f, f, f, 54, 46, 48, 60, -66, f, 62, f, -66, -66, 64, 66, -66, -66, f, f, 68, -66, -66, -66, -66, f, f, -66, 50, f, -66, 56, -66, f, f, -66, 70, 58 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 78 },
    { -17, -17, f, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, f, f, f, -17, -17, -17, -17, -17, f, -17, f, -17, -17, -17, -17, -17, -17, f, f, -17, -17, -17, -17, -17, f, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17 },
    { -65, -65, f, f, 44, f, -65, -65, -65, f, f, 52, -65, f, f, f, f, 54, 46, 48, 60, -65, f, 62, f, -65, -65, 64, 66, -65, -65, f, f, 68, -65, -65, -65, -65, f, f, -65, 50, f, -65, 56, -65, f, f, -65, 70, 58 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 81 },
    { -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 83 },
    { f, f, f, f, f, 35, f, f, f, f, f, f, 73, 10, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 84, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 85 },
    { -19, -19, f, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, f, f, f, -19, -19, -19, -19, -19, f, -19, f, -19, -19, -19, -19, -19, -19, f, f, -19, -19, -19, -19, -19, f, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19 },
    { -16, -16, f, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, f, f, f, -16, -16, -16, -16, -16, f, -16, f, -16, -16, -16, -16, -16, -16, f, f, -16, -16, -16, -16, -16, f, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16 },
    { -15, -15, f, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, f, f, f, -15, -15, -15, -15, -15, f, -15, f, -15, -15, -15, -15, -15, -15, f, f, -15, -15, -15, -15, -15, f, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15 },
    { -38, -38, -38, -38, -38, -38, -38, -38, -38, 39, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38 },
    { -39, -39, -39, -39, -39, -39, -39, -39, -39, 39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39 },
    { f, f, f, f, 44, f, f, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, f, 50, 90, f, 56, f, f, f, f, 70, 58 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 91 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 92, f, 41, 42 },
    { f, f, f, f, 44, f, -95, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, f, 50, f, f, 56, -95, f, -95, f, 70, 58 },
    { -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, 94, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 95, f, 41, 42 },
    { f, f, f, f, 44, f, -94, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, f, 50, f, f, 56, -94, f, -94, f, 70, 58 },
    { f, f, f, f, f, f, 97, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 98, f, -91, f, f, f, f, f, f, 99 },
    { f, f, -96, f, -96, -96, f, f, f, f, -96, f, -96, -96, -96, -96, -96, f, f, f, f, f, -96, f, f, f, -96, f, f, -96, f, -96, f, f, f, f, f, f, -96, f, f, f, f, f, f, f, f, -96 },
    { f, f, -97, f, -97, -97, f, f, f, f, -97, f, -97, -97, -97, -97, -97, f, f, f, f, f, -97, f, f, f, -97, f, f, -97, f, -97, f, f, f, f, f, f, -97, f, f, f, f, f, f, f, f, -97 },
    { f, f, 6, f, 7, 8, f, f, f, f, 11, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 93, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, -90, f, f, f, f, f, 32, f, 96, 100, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 101, f, 41, 42 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -92 },
    { f, f, f, f, 44, f, -93, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, f, 50, f, f, 56, -93, f, -93, f, 70, 58 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 103 },
    { -89, -89, f, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, f, f, f, -89, -89, -89, -89, -89, f, -89, f, -89, -89, -89, -89, -89, -89, f, f, -89, -89, -89, -89, -89, f, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89 },
    { f, f, f, f, 44, f, f, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, f, 50, f, 105, 56, f, f, f, f, 70, 58 },
    { -72, -72, f, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, f, f, f, -72, -72, -72, -72, -72, f, -72, f, -72, -72, -72, -72, -72, -72, f, f, -72, -72, -72, -72, -72, f, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72 },
    { -37, -37, -37, -37, -37, -37, -37, -37, -37, 39, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37 },
    { f, f, f, f, 44, f, f, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, 108, 50, f, f, 56, f, f, f, f, 70, 58 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 109, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 110 },
    { -76, -76, f, f, f, f, -76, -76, -76, f, f, f, -76, f, f, f, f, f, f, f, f, -76, f, f, f, -76, -76, f, f, -76, -76, f, f, f, -76, -76, -76, -76, f, f, -76, f, f, f, f, f, f, f, -76 },
    { f, -61, 6, f, 7, 8, -61, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, -61, -61, -61, -61, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, 74, f, 112, f, f, f, f, f, 37, f, f, 38, 79, f, 41, 42 },
    { f, -44, f, f, f, f, 113, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -44, -44, -44, -44 },
    { f, -45, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -45, -45, -45, -45 },
    { -54, -54, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 115, f, f, f, f, f, f, f, f, f, 4 },
    { f, 116 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 117, f, 41, 42 },
    { -77, -77, f, f, 44, f, -77, -77, -77, f, f, 52, -77, f, f, f, f, 54, 46, 48, 60, -77, f, 62, f, -77, -77, 64, 66, -77, -77, f, f, 68, -77, -77, -77, -77, f, f, -77, 50, f, f, 56, f, f, f, -77, 70, 58 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 16, f, f, 119, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 124, f, f, f, f, f, f, f, 125 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 16, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 120 },
    { f, f, f, f, f, f, f, f, f, f, f, f, 18, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 121 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 122, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 123 },
    { -85, -85, f, f, f, f, -85, -85, -85, f, f, f, -85, f, f, f, f, f, f, f, f, -85, f, f, f, -85, -85, f, f, -85, -85, f, f, f, -85, -85, -85, -85, f, f, -85, f, f, f, f, f, f, f, -85 },
    { -69, -69, f, f, f, f, -69, -69, -69, f, f, f, -69, f, f, f, f, f, f, f, f, -69, f, f, f, -69, -69, f, f, -69, -69, f, -69, f, -69, -69, -69, -69, f, f, -69, f, f, f, f, -69, f, f, -69 },
    { -83, -83, f, f, f, f, -83, -83, -83, f, f, f, -83, f, f, f, f, f, f, f, f, -83, f, f, f, -83, -83, f, f, -83, -83, f, 126, f, -83, -83, -83, -83, f, f, -83, f, f, f, f, 128, f, f, -83 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, 127, f, f, f, f, f, f, f, 37, f, f, 38, 79, f, 41, 42 },
    { -84, -84, f, f, f, f, -84, -84, -84, f, f, f, -84, f, f, f, f, f, f, f, f, -84, f, f, f, -84, -84, f, f, -84, -84, f, f, f, -84, -84, -84, -84, f, f, -84, f, f, f, f, 75, f, f, -84 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 16, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 129 },
    { -70, -70, f, f, f, f, -70, -70, -70, f, f, f, -70, f, f, f, f, f, f, f, f, -70, f, f, -70, -70, -70, f, f, -70, -70, f, -70, f, -70, -70, -70, -70, f, f, -70, f, f, f, f, -70, f, f, -70 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 131, f, 41, 42 },
    { f, f, f, 132, 44, f, f, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, f, 50, f, f, 56, f, f, f, f, 70, 58 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, -54, -54, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 133, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -57, -57, -57, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 134 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 135, 136, 140 },
    { -78, -78, f, f, f, f, -78, -78, -78, f, f, f, -78, f, f, f, f, f, f, f, f, -78, f, f, f, -78, -78, f, f, -78, -78, f, f, f, -78, -78, -78, -78, f, f, -78, f, f, f, f, f, f, f, -78 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 137, f, 41, 42 },
    { f, f, f, 138, 44, f, f, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, f, 50, f, f, 56, f, f, f, f, 70, 58 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, -54, -54, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 139, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -58, -58, -58 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 141, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 142 },
    { -79, -79, f, f, f, f, -79, -79, -79, f, f, f, -79, f, f, f, f, f, f, f, f, -79, f, f, f, -79, -79, f, f, -79, -79, f, f, f, -79, -79, -79, -79, f, f, -79, f, f, f, f, f, f, f, -79 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 16, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 144, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 145 },
    { f, f, f, f, f, f, f, f, f, f, f, f, -40, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -40, f, f, f, f, f, f, -40 },
    { f, f, f, f, f, f, f, f, f, f, f, f, 18, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 146, f, f, f, f, f, f, 148, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 150 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 147 },
    { f, f, f, f, f, f, f, f, f, f, f, f, -41, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -41, f, f, f, f, f, f, -41 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 149 },
    { f, f, f, f, f, f, f, f, f, f, f, f, -42, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -42, f, f, f, f, f, f, -42 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 151, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 152 },
    { -86, -86, f, f, f, f, -86, -86, -86, f, f, f, -86, f, f, f, f, f, f, f, f, -86, f, f, f, -86, -86, f, f, -86, -86, f, f, f, -86, -86, -86, -86, f, f, -86, f, f, f, f, f, f, f, -86 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 16, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 154, f, f, f, f, f, f, f, 167 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -69, f, f, f, f, f, f, f, 155, f, f, f, f, f, f, f, f, f, f, f, f, -69 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 156, f, 41, 42 },
    { f, f, f, f, 44, f, f, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, f, 50, f, f, 56, 157, f, f, f, 70, 58 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 158, f, 41, 42 },
    { f, f, f, f, 44, f, f, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, 159, 50, f, f, 56, 162, f, f, f, 70, 58 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 160, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 161 },
    { -80, -80, f, f, f, f, -80, -80, -80, f, f, f, -80, f, f, f, f, f, f, f, f, -80, f, f, f, -80, -80, f, f, -80, -80, f, f, f, -80, -80, -80, -80, f, f, -80, f, f, f, f, f, f, f, -80 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, f, f, f, f, f, f, f, f, 37, f, f, 38, 163, f, 41, 42 },
    { f, f, f, f, 44, f, f, f, f, f, f, 52, f, f, f, f, f, 54, 46, 48, 60, f, f, 62, f, f, f, 64, 66, f, f, f, f, 68, f, f, f, f, f, f, 164, 50, f, f, 56, f, f, f, f, 70, 58 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 165, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 166 },
    { -81, -81, f, f, f, f, -81, -81, -81, f, f, f, -81, f, f, f, f, f, f, f, f, -81, f, f, f, -81, -81, f, f, -81, -81, f, f, f, -81, -81, -81, -81, f, f, -81, f, f, f, f, f, f, f, -81 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 168, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 128 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, 169, f, f, f, f, f, f, f, 37, f, f, 38, 79, f, 41, 42 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 170, f, f, f, f, 75 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 171, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 172 },
    { -82, -82, f, f, f, f, -82, -82, -82, f, f, f, -82, f, f, f, f, f, f, f, f, -82, f, f, f, -82, -82, f, f, -82, -82, f, f, f, -82, -82, -82, -82, f, f, -82, f, f, f, f, f, f, f, -82 },
    { -54, f, f, f, f, f, f, -54, -54, f, f, f, -54, f, f, f, f, f, f, f, f, -54, f, f, f, -54, -54, f, f, -54, -54, f, f, f, f, -54, f, f, f, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, f, f, f, f, f, 174, f, f, f, f, f, f, f, f, f, 4 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 175 },
    { -74, -74, f, f, f, f, -74, -74, -74, f, f, f, -74, f, f, f, f, f, f, f, f, -74, f, f, f, -74, -74, f, f, -74, -74, f, f, f, -74, -74, -74, -74, f, f, -74, f, f, f, f, f, f, f, -74 },
    { f, -46, f, f, f, f, 177, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -46, -46, -46, -46 },
    { f, -47, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -47, -47, -47, -47 },
    { -55, -55, f, f, f, f, 179, -55, -55, f, f, f, -55, f, f, f, f, f, f, f, f, -55, f, f, f, -55, -55, f, f, -55, -55, f, f, f, -55, -55, -55, -55, f, f, -55, f, f, f, f, f, f, f, -55 },
    { -56, -56, f, f, f, f, f, -56, -56, f, f, f, -56, f, f, f, f, f, f, f, f, -56, f, f, f, -56, -56, f, f, -56, -56, f, f, f, -56, -56, -56, -56, f, f, -56, f, f, f, f, f, f, f, -56 },
    { f, f, f, f, f, 35, f, f, f, f, 36, f, 73, 10, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 80, f, f, f, f, f, f, 82, f, f, f, f, f, f, f, f, f, f, 84, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 86 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 182, f, f, f, f, f, f, f, f, f, f, f, f, 184 },
    { f, f, 6, f, 7, 8, f, f, f, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, f, 15, f, f, f, 16, f, f, 17, f, 30, f, f, f, f, f, f, 31, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, 33, f, f, 34, f, f, 183, f, f, f, f, f, f, f, 37, f, f, 38, 79, f, 41, 42 },
    { -75, -75, f, f, f, f, -75, -75, -75, f, f, f, -75, f, f, f, f, f, f, f, f, -75, f, f, f, -75, -75, f, f, -75, -75, f, f, f, -75, -75, -75, -75, f, f, -75, f, f, f, f, 75, f, f, -75 },
    { f, f, f, f, f, f, f, f, f, f, f, f, 9, f, f, f, f, f, f, f, f, f, f, f, f, f, 16, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 32, f, f, f, f, f, f, 180, f, f, f, f, f, f, f, f, f, f, 185, f, f, f, f, f, 41 },
    { f, f, f, f, f, -71, f, f, f, f, -71, f, -71, -71, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -68, f, f, f, f, f, f, -71, f, f, f, f, f, -68, -71 },
    { f, f, f, f, f, -71, f, f, f, f, -71, f, -71, -71, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -67, f, f, f, f, f, f, -71, f, f, f, f, f, -67, -71 },
    { -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88 },
    { -87, -87, f, f, f, -73, -87, -87, -87, f, -73, f, -73, -73, f, f, f, f, f, f, f, -87, f, f, f, -87, -87, f, f, -87, -87, f, f, f, -87, -87, -87, -87, f, -73, -87, f, f, f, f, f, -73, f, -87 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -1 },
    { -54, f, 6, f, 7, 8, f, -54, -54, f, f, f, 9, 10, 12, 13, 14, f, f, f, f, -54, 15, f, f, -54, 16, f, f, 17, -54, 30, f, f, -54, f, f, f, 31, f, -54, f, f, f, f, f, f, f, -54, f, f, f, f, 32, f, f, f, 33, 191, f, 34, f, f, 193, f, f, f, f, 4, 195, f, 37, f, f, 38, 79, f, 41, 42 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 192 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -53 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, 194, f, f, f, f, f, f, f, f, f, f, 75 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -52 },
    { f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, -2 },
}

--- Run the parser across a sequence of tokens.
--
-- @tparam table context The current parser context.
-- @tparam function get_next A stateful function which returns the next token.
-- @treturn boolean Whether the parse succeeded or not.
local function parse(context, get_next, start)
    local stack, stack_n = { start or 1, 1, 1 }, 1
    local reduce_stack = {}

    while true do
        local token, token_start, token_end = get_next()
        local state = stack[stack_n]
        local action = transitions[state][token]

        if not action then -- Error
            return handle_error(context, stack, stack_n, token, token_start, token_end)
        elseif action >= 0 then -- Shift
            stack_n = stack_n + 3
            stack[stack_n], stack[stack_n + 1], stack[stack_n + 2] = action, token_start, token_end
        elseif action >= -2 then -- Accept
            return true
        else -- Reduce
            -- Reduction is quite complex to get right, as the error code expects the parser
            -- to be shifting rather than reducing. Menhir achieves this by making the parser
            -- stack be immutable, but that's hard to do efficiently in Lua: instead we track
            -- what symbols we've pushed/popped, and only perform this change when we're ready
            -- to shift again.

            local popped, pushed = 0, 0
            while true do
                -- Look at the current item to reduce
                local reduce = productions[-action]
                local terminal, to_pop = reduce[1], reduce[2]

                -- Find the state at the start of this production. If to_pop == 0
                -- then use the current state.
                local lookback = state
                if to_pop > 0 then
                    pushed = pushed - to_pop
                    if pushed <= 0 then
                        -- If to_pop >= pushed, then clear the reduction stack
                        -- and consult the normal stack.
                        popped = popped - pushed
                        pushed = 0
                        lookback = stack[stack_n - popped * 3]
                    else
                        -- Otherwise consult the stack of temporary reductions.
                        lookback = reduce_stack[pushed]
                    end
                end

                state = transitions[lookback][terminal]
                if not state or state <= 0 then error("reduce must shift!") end

                -- And fetch the next action
                action = transitions[state][token]

                if not action then -- Error
                    return handle_error(context, stack, stack_n, token, token_start, token_end)
                elseif action >= 0 then -- Shift
                    break
                elseif action >= -2 then -- Accept
                    return true
                else
                    pushed = pushed + 1
                    reduce_stack[pushed] = state
                end
            end

            if popped == 1 and pushed == 0 then
                -- Handle the easy case: Popped one item and replaced it with another
                stack[stack_n] = state
            else
                -- Otherwise pop and push.
                -- FIXME: The positions of everything here are entirely wrong.
                local end_pos = stack[stack_n + 2]
                stack_n = stack_n - popped * 3
                local start_pos = stack[stack_n + 1]

                for i = 1, pushed do
                    stack_n = stack_n + 3
                    stack[stack_n], stack[stack_n + 1], stack[stack_n + 2] = reduce_stack[i], end_pos, end_pos
                end

                stack_n = stack_n + 3
                stack[stack_n], stack[stack_n + 1], stack[stack_n + 2] = state, start_pos, end_pos
            end

            -- Shift the token onto the stack
            stack_n = stack_n + 3
            stack[stack_n], stack[stack_n + 1], stack[stack_n + 2] = action, token_start, token_end
        end
    end
end

return {
    tokens = tokens,
    parse = parse,
    repl_exprs = 190, --[[- The repl_exprs starting state. ]]
    program = 1, --[[- The program starting state. ]]
}
